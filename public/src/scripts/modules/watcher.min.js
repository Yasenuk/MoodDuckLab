// @ts-nocheck
export class Watcher{constructor(){this.defaultObserver=null,this.customObservers=new Map}init(e={root:null,rootMargin:"0px 0px -100px 0px",threshold:.1}){e.root=e.root?document.querySelector(`.${e.root}`):null,this.defaultObserver=new IntersectionObserver((e=>this.observerCallBack(e)),e),this.defaultObserver.root?.classList.add("_watcher"),this.watch()}getObserverForElement(e,t){const s=e.dataset.watchMargin;if(!s)return this.defaultObserver;const r=`margin:${s}`;if(!this.customObservers.has(r)){const e=new IntersectionObserver((e=>this.observerCallBack(e)),{...t,rootMargin:s});this.customObservers.set(r,e)}return this.customObservers.get(r)}watch(){document.querySelectorAll("[data-watch]").forEach((e=>{e.classList.add("_watcher-element");this.getObserverForElement(e,this.defaultObserver).observe(e)}))}watchOne(e){if("navigator"!==e.dataset.watch){this.defaultObserver?.unobserve(e);const t=e.dataset.watchMargin;if(setTimeout((()=>{e.classList.add("_end")}),3e3),t){const s=`margin:${t}`;this.customObservers.get(s)?.unobserve(e)}}}observerCallBack(e){e.forEach((e=>{const t=e.target;e.isIntersecting?(t.classList.add("_watched"),this.watchOne(t)):t.classList.remove("_watched")}))}}